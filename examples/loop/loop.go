package main

import (
	"context"
	_ "embed"
	"fmt"
	"log"
	"os"
	"strconv"

	"github.com/tetratelabs/wazero"
)

// stackWasm was generated by the following:
//	cd testdata; wat2wasm --debug-names add.wat
//go:embed testdata/stack.wasm
var stackWasm []byte

// main implements a basic function in both Go and WebAssembly.
func main() {
	// Choose the context to use for function calls.
	ctx := context.Background()

	r := wazero.NewRuntimeWithConfig(wazero.NewRuntimeConfigInterpreter())
	defer r.Close(ctx) // This closes everything this Runtime created.

	wasm, err := r.InstantiateModuleFromBinary(ctx, stackWasm)
	if err != nil {
		log.Panicln(err)
	}

	// Read two args to add.
	x := readArg()

	add := wasm.ExportedFunction("add3")
	results, err := add.Call(ctx, x)
	if snapshot != nil {
		log.Println(snapshot)
	} else if err != nil {
		log.Panicln(err)
	} else {
		fmt.Printf("%s: %d + 3 = %d\n", wasm.Name(), x, results[0])
	}

}

func readArg() uint64 {
	x, err := strconv.ParseUint(os.Args[1], 10, 64)
	if err != nil {
		log.Panicf("invalid arg %v: %v", os.Args[1], err)
	}

	return x
}

func shouldBreakpoint() bool {
	return false
}
